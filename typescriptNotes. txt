To download the typescript first we need to download node js in our PC and then go to the Typescript official website , read the docs and download the typescript or you can simply type
"npm i -g typescript" to install the typescript globally in your PC

LESSON-1
** INSTALL AND RUN TYPESCRIPT

Typescript is a static typed language which help us to catch the error while developing unlike javascript which catch the error in run time and its difficult to debug.

To run the typescript file we need to open the terminal and go to that file directory where we make our index.ts file and then simply type 'tsc filename' then it will compile our typescript file into javascript file it make the js file in the same directory.

LESSON 2
** TS CONFIGURATION FILE AND PROGRAM TO ADD TWO NUMBERS AND CATCH AND SOLVE THE ERROR IN TS
Type annotation is the way of declaring variable as a type(number,string and so on).
Typescript throws the error during the compilation time so we know the error while developing.
 //@ts-ignore is used to warning in the TS

 CONFIGURATION
 without TSconfig file ts compiler will create its js file so to get rid of this we use tsconfig file.

 To set the ts config file do the following steps.
tsc --init   It will create a ts config file
open tsconfig file click ctrl+f and type "noEmitOnError" and uncomment that code and you're ready to go. But keep that in mind that the index.ts file and the config file must be in a same directory. And run only "tsc" command no need to run "tsc index.ts".

LESSON_3
** TYPE ANNOTATION
Type annotation is the way of specifying the variable function parameter and function return value and it helps the TS compiler to enforce type checking and provide type safety during development, as well as what operations could be performed on that variable or value.
type annotation can be expressed by using the colon after the variable "egVariable:string"

List of types in ts are as follows: -

1. Unknown
2. Any
3. Undefined
4. Void
5. Null
6. Number , Number Enum
7. BigInt
8. Boolean
9. String , String Enum
10. Symbol , Unique Symbol
11. Object , Array , Tuple
12. Function
13. Constructor
14. Never

Learned about number type and string type in TS

Some of the practice question to do it on your own.

//Practice Set
// Declare a variable longText of type string and assign it to a long sentence. Extract the first 10 characters from longText and store them in a variable called shortText

// Declare two variable str1 and str2 of type string and assign them different sentences. Compare the two strings and store the results (true or false) in a variable called areEqual.

// Declare variables product and price of type string and number , respectively. Create string using template literals to display the product and price in the format "The product is ${product} is priced at ${price} dollars"

LESSON_4
** BOOLEAN AND BIGINT IN TS
In typescript Boolean type represents a value that can be either true or false. It is one of the basic primitive types in ts

BigInt is a built in type that allows you to work with numbers that are larger than the range supported by the regular number types. In JS we can't read the whole numbers beyond 2 raise to power 53.
BigInt literals are written by appending the n suffix to an integer literals
const num:bigint = 1000n
big int can be used only in ECMAScript2020 not less than that, so we need to configure our tsconfig file "target:ES2020" then you're ready to go.


Type assertion (Type as any)
Type casting can be done using the as keyword or the angle-bracket syntax.
//Typecasting eg
let value: any = "123";
let numericValue: number = parseInt(value); // Implicit casting

// Explicit casting using 'as' keyword
let value2: any = "456";
let numericValue2: number = value2 as number;

LESSON_5
** ANY VS UNKNOWN IN TS
 The any type is the most flexible type in Typescript. It essentially turns off all type checking for the variables or expressions, you will see type any when you first write the codd

Use Cases of any
Working with dynamic data : when dealing with data from dynamic sources like user inputs , network responses , or deserialized JSON objects , the any type can be useful.

Migration from javascript : When migrating an existing javascript code to typescript , using a any type can be a convenient way to quickly annotate variables and functions without immediately specifying their precise types.

Use Cases of Unknown
The Unknown type is a safer alternative to any because it stills enforces type checking and type safety

        Different between type checking and type safety
        type checking is a value assign to the variable if the variable is number then it must contain number only whereas type safety is the property of that type if it's number then you can use only number properties.
Variables of type Unknown can hold values of any type , but you must perfrom type checks or type assertions before using them in specific way.

LESSON_6
** TYPE INFERENCE
Type inference in TS refers to the ability of the TS compiler to automatically determine and assign types of variable , expressions, adn function return values based on their usage and context in the code.
Typescript itself assume the type of the variable based on thier first value.

What are the some best practices for using type inference in Typescript
Use type inference for simple Cases where the assigned value clearly indicates the intended type.
When in doubt, provide explicit type annotation to make your intention clear.
Avoid relying too heavily on type inference when the assigned value is complex of ambiguous.
Regularly review and refactor your code to ensure the inferred type align with your intentions.

Infer mean to assume.